1 - Single Next clause return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN such that Next(7, 18)
TRUE
5000
2 - Single Next* clause return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN such that Next*(_, 7)
FALSE
5000
3 - Single Next clause return tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select <s, a> such that Next(s, a)
7 18, 2 3, 3 4, 8 9, 9 10, 10 11, 13 14, 13 16, 14 15, 18 19, 19 20, 21 22, 24 25, 15 17, 16 17, 23 24
5000
4 - Single Next* clause return tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select<w.stmt#, s.stmt#> such that Next*(s, w)
8 7, 8 8, 8 9, 8 10, 8 11, 8 12, 8 13, 8 14, 8 15, 8 16, 8 17
5000
5 - Single Next clause return synonym
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select re such that Next(1, re)
2
5000
6 - Single Next* clause return synonym attribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select s.stmt# such that Next*(s, w)
7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
5000
7 - Multiple Next clauses return synonym
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select s such that Next*(s, a) and Next*(s, ifs)
8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 7, 21, 22
5000
8 -  Multiple Next clauses return synonym sttribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select re.stmt# such that Next(s, re) and Next(re, _)
2
5000
9 -  Multiple Next clauses return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN such that Next(7, 18) and Next(s, 18) and Next (7, s)
FALSE
5000
10 -  Multiple Next clauses return tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select <a.stmt#, cl> such that Next*(cl, _) and Next*(a, cl)
3 5, 4 5, 9 12, 10 12, 11 12, 14 12, 15 12, 16 12, 17 12
5000
11 - Single Calls clause return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN such that Calls("One", "Two")
FALSE
5000
12 - Single Calls* clause return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN such that Calls*(p, p)
FALSE
5000
13 - Single Calls clause return tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select <p, p1> such that Calls(p, q)
foo foo, foo bar, foo ellipse, bar foo, bar bar, bar ellipse
5000
14 - Single Calls* clause return tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select <p, q> such that Calls*(p, q)
foo bar, bar ellipse, foo ellipse
5000
15 - Single Calls clause return synonym
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select p such that Calls(_,p)
bar, ellipse
5000
16 - Single Calls* clause return synonym attribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select cl.stmt# such that Calls(p,_)
5, 12
5000
17 - Multiple Calls clauses return synonym
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select p such that Calls("foo", p) and Calls("foo", q)
bar
5000
18 -  Multiple Calls clauses return synonym sttribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select q.procName such that Calls*(p,q) and Calls*(_,p)
ellipse
5000
19 -  Multiple Calls clauses return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN  such that Calls*(p, q) and Calls*(q, p)
FALSE
5000
20 -  Multiple Calls clauses return tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select <p, q> such that Calls*(p, q) and Calls*(p,_)
foo bar, bar ellipse, foo ellipse
5000
21 -  Multiple relationship clauses return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN such that Parent*(ifs, a) and Next(a, w)
TRUE
5000
22 -  Multiple relationship clauses return tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select <p.procName, v.varName> such that Modifies(p, v) and Uses(p, v)
foo x, foo y, foo pi, foo area, foo sin, foo tan, foo cos, foo length, bar x, bar y, bar pi, bar area, bar sin, bar tan, bar cos, bar length, ellipse pi, ellipse area, ellipse x, ellipse y
5000
23 -  Multiple relationship clauses return synonym
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select p such that Calls*(p, q) and Next(7, 18) and Uses(q, "x")
foo, bar
5000
24 -  Multiple relationship clauses return attribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select a.stmt# such that Parent*(ifs, a) and Next(a, w)
17
5000
25 -  Single with clauses return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN  with v.varName = p.procName
FALSE
5000
26 -  Single with clauses return tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select <p, c> with s.stmt# = c.value
foo 1, foo 2, foo 3, foo 10, bar 1, bar 2, bar 3, bar 10, ellipse 1, ellipse 2, ellipse 3, ellipse 10
5000
27 -  Single with clauses return synonym
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select p with 12 = 12
foo, bar, ellipse
5000
28 -  Single with clauses return attribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select v.varName with v.varName = "k"
none
5000
29 -  Multiple with clauses return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN with s.stmt# = c.value and c.value = n
TRUE
5000
30 -  Multiple with clauses return tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select <p.procName, s.stmt#, v> with v.varName = "x" and s.stmt# = 26
foo 26 x, bar 26 x, ellipse 26 x
5000
31 -  Multiple with clauses return synonym
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select s with s.stmt# = c.value and c.value = n
1, 2, 3, 10
5000
32 -  Multiple with clauses return attribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select a.stmt# with a.stmt# = c.value and re.stmt# = c.value
none
5000
33 -  Multiple pattern clauses return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN pattern w(v,_) pattern ifs(v,_,_)
TRUE
5000
34 -  Multiple pattern clauses return tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select <a, w> pattern a(v,_) and w(v,_)
14 8, 16 8, 18 8, 24 8
5000
35 -  Multiple pattern clauses return synonym
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select a  pattern a(_,_"x"_) and w1(_,_)
3, 9, 11, 15, 17, 20, 22, 24, 25
5000
36 -  Multiple pattern clauses return attribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select v.varName pattern w(v1,_) pattern ifs(v1,_,_) pattern a(v1,_)
x,y,length,t,tan,sin,cos,pi,area
5000
37 -  Relationship and with clauses return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN such that Calls*(q,p) with p.procName = "ellipse"
TRUE
5000
38 -  Relationship and with clauses return tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select<c.value, n>  with n1 = c.value such that Next*(n1, n)
1 2, 1 3, 1 4, 1 5, 1 6, 10 8, 10 9, 10 10, 10 11, 10 12, 10 13, 10 14, 10 15, 10 16, 10 17, 2 3, 2 4, 2 5, 2 6, 3 4, 3 5, 3 6
5000
39 -  Relationship and with clauses return synonym
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select v such that Follows*(9, s) and Uses(s, v) with s.stmt# =n and n1 = c.value such that Modifies("ellipse", v) with n1 = n
y
5000
40 -  Relationship and with clauses return attribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select cl.stmt# such that Calls(p,_) with cl.procName = p.procName
5
5000
41 -  Relationship and pattern clauses return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN such that Parent(ifs, a) pattern w(v,_) and a(v,_)
TRUE
5000
42 -  Relationship and pattern clauses return tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select <p, v, ifs> such that Modifies(p, v) pattern ifs("x",_,_) such that Uses(p, "x")
ellipse pi 7, ellipse area 7, ellipse x 7, ellipse y 7, bar pi 7, bar area 7, bar x 7, bar y 7, bar sin 7, bar cos 7, bar tan 7, bar length 7, foo pi 7, foo area 7, foo x 7, foo y 7, foo sin 7, foo cos 7, foo tan 7, foo length 7, foo t 7
5000
43 -  Relationship and pattern clauses return synonym
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select v pattern ifs(v,_,_) and while(v,_) such that Uses("ellipse", "length")
none
5000
44 -  Relationship and pattern clauses return attribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select ifs.stmt# pattern ifs(v,_,_) and w(v,_) such that Uses("ellipse", v)
7
5000
45 -  With and pattern clauses return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN pattern w("x",_) with w.stmt# = 8
TRUE
5000
46 -  With and pattern clauses return tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select <cl, ifs.stmt#> with cl.procName = p.procName pattern ifs(v,_,_)
5 7, 5 13, 5 23, 12 7, 12 13, 12 23
5000
47 -  With and pattern clauses return synonym
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select w with v.varName = "sin" pattern w(v,_)
none
5000
48 -  With and pattern clauses return attribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select v.varName with v1.varName = "sin" pattern ifs(v1,_,_) and ifs(v,_,_)
sin, tan, cos
5000
49 -  All types of clauses return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN such that Uses(q, "y") and Uses(q, v) pattern w(v,_) with v.varName = "x" and q.procName = "foo"
TRUE
5000
50 -   All types of clauses return tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select <cl, ifs.stmt#> with cl.procName = p.procName pattern ifs(v,_,_) such that Modifies(p, v)
5 7, 5 13, 5 23, 12 7, 12 23
5000
51 -   All types of clauses return synonym
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select  p such that Modifies(q, "y") and Uses(q, v) pattern w(v,_) with q.procName = p.procName
foo, bar, ellipse
5000
52 -   All types of clauses return attribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select v.varName such that Modifies(q, "y") and Uses(q, v) pattern ifs(v,_,_) with q.procName = cl.procName
x, y, sin, cos, tan, area
5000
53 - Syntatic error when return BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select BOOLEAN with ifs(_,_)
none
5000