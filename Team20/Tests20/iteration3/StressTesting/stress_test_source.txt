procedure a {
    a = (2 * k + w - 1) / 3;
    while (x > 3) {
        while (x < 10) {
            while (k > 1) {
		x = 2;
		y = 2 * x;
	        call b;
		y = 3;
		call c;
		call c;
	    }
	    read p;
	    while ( k < 0) {
		p = p + 1;
		k = p * 2;
		p = k;
		while (x > 5) {
		    a = b;
		    b = c;
		    c = d;
		    d = e;
		    e = f;
		    f = g;
		    while (y > 7) {
			call c;
		    }
		}
	    }
	}
    }	
    
    if (a == 1) then {
        b = a + 1;
	if (b == 2) then{
	    c = b + 1;
	    if (c == 3) then {
		d = c + 1;
		if (d == 4) then {
		    e = d + 1;
		    if (e < a) then {
			print e;
		    } else {
			print a;
			call b;
		    }
		} else {
		    read a;
		    if ( d > 4) then {
			print d;
		    } else {
			read b;
		    }
		}
	    } else {
		a = c + c;
		b = d + d;
		c = e + e;
	    }
	} else {
	    print b;
	}
    } else {
        call c;
    }
    read a;
}

procedure b {
    while (w > 1) {
	if (w < 1) then {
	    x = w + 1;
	} else {
	    w = y + z;
	}
    }
    while (w > 2) {
	if (x > 0) then {
	    if (y < 0) then {
		read y;
		while (y == 0) {
		    call c;
		    if (z == 0) then {
			z = x + 1;
			z = 1;
			x = z + 2;
			k = x + 1;
		    } else {
			x = k;
		    }
		}
	    } else {
		l = l + 1;
		if (x > 0) then {
		    while (10 < 11) {
			a1 = b1;
			b1 = c1;
			c1 = d1;
			d1 = e1;
			e1 = f1;
			f1 = g1;
			g1 = h1;
			h1 = a1;
			while (x > 1) {
			    a1 = 1;
			    b1 = 1;
			    c1 = 1;
			    d1 = 1;
			}
		    }
		    call c;
		} else {
		    print a1;
		    call c;
		    call d;
		    call e;
		} 
	    }
	} else {
	    while (k > k) {
		a1 = a3;
	        read a1;
		a1 = a2;
		a2 = a3;
	    }
	}
    }
}	
		

procedure c {
    this = is;
    is = crazy;
    crazy = is;
    is = this;
    call d;
    while (k > 0) {
	print is;
        is = this + crazy;
        crazy = is + crazy;
        if (crazy != ((((((here) + is)*alot)/of)))) then {
	    is = this;
            crazy = crazy + 1;
	} else {
	    this = 1;
	    is = 1;
	    crazy = 1;
	    call e;
	}
    }
    call e;
}

procedure d {
    a1 = a2;
    a2 = a1;
    call e;
    if (a1 > a2) then {
	if (a1 == a3) then {
	    aa3 = aa1 + 3;
	    aa1 = aa1 + aa2;
	    aa2 = aa3 + aa4;
	    aa5 = aa4 + aa3;
	    aa1 = bb1 + bb3;
	    aa1 = 1;
	    aa3 = aa1 + aa2;
	    if (aa1 > aa2) then {
		read aa1;
		read aa2;
		read aa3;
	    } else {
		read aa4;
		read aa5;
		read a1;
	    }
	} else {
	    while (x-1 > x + 1) {
		while (aa1 > aa2) {
		    if (aa2 > aa3) then {
			aa3 = aa2 - 1;
			aa1 = 1;
		    } else {
			while (x > 0) {
			    aa1 = aa2 + aa3 + aa4 + aa5 + aa6;
			}
		    }
		    call e;
		}
	        if (x > 0) then {
		    bb3 = aa1 + 3;
		    bb4 = bb3;
		    bb5 = bb4;
		    bb6 = bb5;
		    bb7 = bb6;
		    bb8 = bb7;
		    bb9 = bb8;
		} else {
 		    read bb3;
		    read bb4;
		    bb5 = bb3 + bb4;
		    bb7 = bb6 + 1;
		    bb6 = bb7 - 1;
		    bb1 = bb4 + 1;
		    bb3 = bb3 + bb4;
	        }
	    }
	}
    } else {
	while (cc1 == cc2) {
	    if (cc1 > cc3) then {
		cc3 = cc2;
		cc4 = cc3;
		cc5 = cc1;
		cc6 = cc2;
	    } else {
  		while (xxxx > 1000000) {
		    xxxx = xx + xx;
		    yyyy = xx + yy + yy;
		    xyxy = xy + xy;
	        }
	    }
	}
    }
}
		
procedure e {
    you = can;
    can = evaluate;
    evaluate = can + you;
    can = yes;
}		
			
procedure f {
    a1 = a2;
    a2 = a1;
    call g;
    if (a1 > a2) then {
	if (a1 == a3) then {
	    aa3 = aa1 + 3;
	    aa1 = aa1 + aa2;
	    aa2 = aa3 + aa4;
	    aa5 = aa4 + aa3;
	    aa1 = bb1 + bb3;
	    aa1 = 1;
	    aa3 = aa1 + aa2;
	    if (aa1 > aa2) then {
		read aa1;
		read aa2;
		read aa3;
	    } else {
		read aa4;
		read aa5;
		read a1;
	    }
	} else {
	    while (x-1 > x + 1) {
		while (aa1 > aa2) {
		    if (aa2 > aa3) then {
			aa3 = aa2 - 1;
			aa1 = 1;
		    } else {
			while (x > 0) {
			    aa1 = aa2 + aa3 + aa4 + aa5 + aa6;
			}
		    }
		    call g;
		}
	        if (x > 0) then {
		    bb3 = aa1 + 3;
		    bb4 = bb3;
		    bb5 = bb4;
		    bb6 = bb5;
		    bb7 = bb6;
		    bb8 = bb7;
		    bb9 = bb8;
		} else {
 		    read bb3;
		    read bb4;
		    bb5 = bb3 + bb4;
		    bb7 = bb6 + 1;
		    bb6 = bb7 - 1;
		    bb1 = bb4 + 1;
		    bb3 = bb3 + bb4;
	        }
	    }
	}
    } else {
	while (cc1 == cc2) {
	    if (cc1 > cc3) then {
		cc3 = cc2;
		cc4 = cc3;
		cc5 = cc1;
		cc6 = cc2;
	    } else {
  		while (xxxx > 1000000) {
		    xxxx = xx + xx;
		    yyyy = xx + yy + yy;
		    xyxy = xy + xy;
	        }
	    }
	}
    }
}

procedure g {
    aa = (2 * kk + ww - 1) / 3;
    while (xx > 3) {
        while (xx < 10) {
            while (kk > 1) {
		xx = 2;
		yy = 2 * x;
	        call b;
		yy = 3;
		call a;
		call c;
	    }
	    read pp;
	    while ( k < 0) {
		pp = pp + 1;
		kk = pp * 2;
		pp = kk;
		while (x > 5) {
		    aaa = bbb;
		    bbb = ccc;
		    ccc = ddd;
		    ddd = eee;
		    eee = fff;
		    fff = ggg;
		    while (yyy > 7) {
			call c;
		    }
		}
	    }
	}
    }	
    
    if (aaa == 1) then {
        bbb = aaa + 1;
	if (bbb == 2) then{
	    ccc = bbb + 1;
	    if (ccc == 3) then {
		ddd = ccc + 1;
		if (ddd == 4) then {
		    eee = ddd + 1;
		    if (eee < aaa) then {
			print eee;
		    } else {
			print aaa;
			call b;
		    }
		} else {
		    read a;
		    if ( ddd > 4) then {
			print ddd;
		    } else {
			read b;
		    }
		}
	    } else {
		aaa = ccc + ccc;
		bbb = ddd + ddd;
		ccc = eee + eee;
	    }
	} else {
	    print bbb;
	}
    } else {
        call c;
    }
    read a;
}

procedure h {
  x = 2;
  z = 3;
  i = 5;
  while (i!=0) {
    x = x - 1;
    if (x==1) then {
      z = x + 1; }
    else {
      y = z + x; }
    z = z + x + i;
    call i;
    i = i - 1; }
  call j; }

procedure i {
  if (x<0) then {
    while (i>0) {
      x = z * 3 + 2 * y;
      call j;
      i = i - 1; }
    x = x + 1;
    z = x + z; }
  else {
    z = 1; }
  z = z + x + i; }

procedure j {
  if (x==1) then {
    z = x + 1; }
  else {
    x = z + x; } }

procedure foo {
  read x;
  read y;
  length = x * x + y * y;
  t = 30;
  call bar;
  print length;
}

procedure bar {
  if ((x >= 0) && (y >= 0)) then {
    while (x != 0) {
      tan = y / x;
      sin = y / length;
      cos = x / length;
      call ellipse;
      if (((sin * sin + cos * cos) == 1) || (!(tan != (sin / cos)))) then {
        x = y / 2;
        y = x / 2;
      } else {
        x = 0;
      }
      length = x * x + y * y;
    }
  } else {
    x = 10;
    y = 10;
    length = x * x + y * y;
  }
}

procedure ellipse {
  pi = 3;
  area = pi * x * y;
  if (area < 10) then {
    x = x + 1;
    y = y + y / x + 1;
  } else {
    print area;
  }
}

procedure One {
  read i;
  if (i <= 0) then {
    i = 10;
  } else {
    i = i;
  }
  while (i >= 0) {
    read x;
    read y;
    read distance;
    k = 0;
    read x1;
    read y1;
    difference =
        (x - x1) * (x - x1) + (y - y1) * (y - y1) - distance * distance;
    if (difference > 0) then {
      print x1;
      print y1;
    } else {
      while (difference <= 0) {
        read x1;
        read y1;
        difference =
            (x - x1) * (x - x1) + (y - y1) * (y - y1) - distance * distance;
        k = k + 1;
      }
      print k;
      print x1;
      print y1;
    }
    i = i - 1;
    call Two;
  }
}

procedure Two {
  if (x1 < x) then {
    if (y1 < y) then {
      i = i + 1;
    } else {
      i = i + 1;
    }
  } else {
    if (y1 < y) then {
      i = i + 1;
    } else {
      i = i;
    }
  }
}
